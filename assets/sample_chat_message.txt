Generate tests for "Retrieve a user by ID"

openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users

servers:
  - url: https://api.example.com/v1

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request (Validation Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: # Example for a 400 Bad Request
                InvalidInput:
                  value:
                    code: VALIDATION_ERROR
                    message: "One or more input fields are invalid."
                    details:
                      - field: username
                        issue: "Username must be between 3 and 20 characters long."
                        value: "ab"
                        code: USERNAME_LENGTH_INVALID
                      - field: email
                        issue: "Must be a valid email address format."
                        value: "invalid-email"
                        code: EMAIL_INVALID_FORMAT
                      - field: password
                        issue: "Password must be at least 8 characters long."
                        value: "short"
                        code: PASSWORD_LENGTH_INVALID
        '409':
          description: Conflict (User with that username or email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: # Example for a 409 Conflict
                DuplicateUser:
                  value:
                    code: DUPLICATE_USER
                    message: "A user with the provided username or email already exists."
                    details:
                      - field: username
                        issue: "This username is already taken. Please choose another."
                        value: "existinguser"
                        code: USERNAME_TAKEN
                      - field: email
                        issue: "An account with this email already exists."
                        value: "existing@example.com"
                        code: EMAIL_ALREADY_REGISTERED
  /users/{userId}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UserNotFound:
                  value:
                    code: USER_NOT_FOUND
                    message: "The requested user was not found."
    patch:
      summary: Update an existing user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request (Validation Error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples: # Example for a 400 Bad Request
                InvalidInput:
                  value:
                    code: VALIDATION_ERROR
                    message: "One or more input fields are invalid."
                    details:
                      - field: username
                        issue: "Username must be between 3 and 20 characters long."
                        value: "ab"
                        code: USERNAME_LENGTH_INVALID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                UserNotFound:
                  value:
                    code: USER_NOT_FOUND
                    message: "The requested user was not found."
        '409':
          description: Conflict (Username or email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                DuplicateUser:
                  value:
                    code: DUPLICATE_USER
                    message: "A user with the provided username or email already exists."


components:
  schemas:
    UserRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: Unique username for the user
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          description: User's password (min 8 characters)
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: Unique username for the user
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          description: User's password (min 8 characters)
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the newly created user.
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: Unique username for the user
        email:
          type: string
          format: email
          description: User's email address
    Error:
      type: object
      properties:
        code:
          type: string
          description: Machine-readable error code (e.g., VALIDATION_ERROR, DUPLICATE_USER)
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message explaining the issue.
          example: "One or more input fields are invalid."
        details:
          type: array
          description: Array of field-specific errors, useful for validation failures.
          items:
            type: object
            properties:
              field:
                type: string
                description: The name of the field that caused the error.
                example: email
              issue:
                type: string
                description: A specific message about the field's issue.
                example: "Must be a valid email address."
              value:
                type: string
                description: The invalid value provided for the field.
                example: "invalid@example"
              code:
                type: string
                description: Specific error code for this field issue (e.g., EMAIL_INVALID_FORMAT, USERNAME_LENGTH_INVALID).
                example: EMAIL_INVALID_FORMAT